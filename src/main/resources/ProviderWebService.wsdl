<wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:tns="http://www.polytech.unice.fr/si/4a/isa/dd/providerService"
                  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http"
                  name="ProviderWebServiceService"
                  targetNamespace="http://www.polytech.unice.fr/si/4a/isa/dd/providerService">
    <wsdl:types>
        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                   xmlns:tns="http://www.polytech.unice.fr/si/4a/isa/dd/providerService"
                   attributeFormDefault="unqualified" elementFormDefault="unqualified"
                   targetNamespace="http://www.polytech.unice.fr/si/4a/isa/dd/providerService">
            <xs:element name="deleteAll" type="tns:deleteAll"/>
            <xs:element name="deleteAllResponse" type="tns:deleteAllResponse"/>
            <xs:element name="findProvider" type="tns:findProvider"/>
            <xs:element name="findProviderResponse" type="tns:findProviderResponse"/>
            <xs:element name="register" type="tns:register"/>
            <xs:element name="registerResponse" type="tns:registerResponse"/>
            <xs:complexType name="deleteAll">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="deleteAllResponse">
                <xs:sequence>
                    <xs:element name="delete_all" type="xs:boolean"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="findProvider">
                <xs:sequence>
                    <xs:element minOccurs="0" name="provider_name" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="findProviderResponse">
                <xs:sequence>
                    <xs:element minOccurs="0" name="provider_found" type="tns:provider"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="provider">
                <xs:sequence>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="packages" nillable="true" type="tns:package"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="provider_bills" nillable="true"
                                type="tns:bill"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="package">
                <xs:sequence>
                    <xs:element minOccurs="0" name="deliveryDate" type="xs:string"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="provider" type="tns:provider"/>
                    <xs:element minOccurs="0" name="registerDate" type="xs:string"/>
                    <xs:element minOccurs="0" name="secret_number" type="xs:string"/>
                    <xs:element name="weight" type="xs:double"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="bill">
                <xs:sequence>
                    <xs:element name="billAmount" type="xs:double"/>
                    <xs:element minOccurs="0" name="billDate" type="xs:string"/>
                    <xs:element minOccurs="0" name="billStatus" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="deliveries" nillable="true"
                                type="tns:delivery"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element name="idBill" type="xs:int"/>
                    <xs:element minOccurs="0" name="paymentDate" type="tns:dateTime"/>
                    <xs:element minOccurs="0" name="provider" type="tns:provider"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="delivery">
                <xs:sequence>
                    <xs:element minOccurs="0" name="bill" type="tns:bill"/>
                    <xs:element minOccurs="0" name="customer" type="tns:customer"/>
                    <xs:element name="customerMark" type="xs:int"/>
                    <xs:element name="deliveryBeginTimeInSeconds" type="xs:int"/>
                    <xs:element minOccurs="0" name="deliveryDate" type="xs:string"/>
                    <xs:element name="deliveryEndTimeInSeconds" type="xs:int"/>
                    <xs:element minOccurs="0" name="drone" type="tns:drone"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="packageDelivered" type="tns:package"/>
                    <xs:element name="price" type="xs:double"/>
                    <xs:element name="status" type="xs:boolean"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="customer">
                <xs:sequence>
                    <xs:element minOccurs="0" name="address" type="xs:string"/>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="customer_deliveries" nillable="true"
                                type="tns:delivery"/>
                    <xs:element name="id" type="xs:int"/>
                    <xs:element minOccurs="0" name="name" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="drone">
                <xs:sequence>
                    <xs:element name="batteryLife" type="xs:int"/>
                    <xs:element minOccurs="0" name="droneId" type="xs:string"/>
                    <xs:element name="flightHours" type="xs:int"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType final="extension restriction" name="dateTime">
                <xs:complexContent>
                    <xs:extension base="tns:baseDateTime">
                        <xs:sequence/>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
            <xs:complexType abstract="true" name="baseDateTime">
                <xs:complexContent>
                    <xs:extension base="tns:abstractDateTime">
                        <xs:sequence/>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
            <xs:complexType abstract="true" name="abstractDateTime">
                <xs:complexContent>
                    <xs:extension base="tns:abstractInstant">
                        <xs:sequence/>
                    </xs:extension>
                </xs:complexContent>
            </xs:complexType>
            <xs:complexType abstract="true" name="abstractInstant">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="droneStatus">
                <xs:sequence/>
            </xs:complexType>
            <xs:complexType name="register">
                <xs:sequence>
                    <xs:element minOccurs="0" name="provider_name" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:complexType name="registerResponse">
                <xs:sequence>
                    <xs:element minOccurs="0" name="return" type="xs:boolean"/>
                </xs:sequence>
            </xs:complexType>
            <xs:element name="UnknownProviderException" type="tns:UnknownProviderException"/>
            <xs:complexType name="UnknownProviderException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="_unknownProviderName" type="xs:string"/>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
            <xs:element name="AlreadyExistingProviderException" type="tns:AlreadyExistingProviderException"/>
            <xs:complexType name="AlreadyExistingProviderException">
                <xs:sequence>
                    <xs:element minOccurs="0" name="conflictName" type="xs:string"/>
                    <xs:element minOccurs="0" name="message" type="xs:string"/>
                </xs:sequence>
            </xs:complexType>
        </xs:schema>
    </wsdl:types>
    <wsdl:message name="findProviderResponse">
        <wsdl:part element="tns:findProviderResponse" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="findProvider">
        <wsdl:part element="tns:findProvider" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="registerResponse">
        <wsdl:part element="tns:registerResponse" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="AlreadyExistingProviderException">
        <wsdl:part element="tns:AlreadyExistingProviderException" name="AlreadyExistingProviderException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="deleteAll">
        <wsdl:part element="tns:deleteAll" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="UnknownProviderException">
        <wsdl:part element="tns:UnknownProviderException" name="UnknownProviderException"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="deleteAllResponse">
        <wsdl:part element="tns:deleteAllResponse" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:message name="register">
        <wsdl:part element="tns:register" name="parameters"></wsdl:part>
    </wsdl:message>
    <wsdl:portType name="ProviderWebService">
        <wsdl:operation name="deleteAll">
            <wsdl:input message="tns:deleteAll" name="deleteAll"></wsdl:input>
            <wsdl:output message="tns:deleteAllResponse" name="deleteAllResponse"></wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="findProvider">
            <wsdl:input message="tns:findProvider" name="findProvider"></wsdl:input>
            <wsdl:output message="tns:findProviderResponse" name="findProviderResponse"></wsdl:output>
            <wsdl:fault message="tns:UnknownProviderException" name="UnknownProviderException"></wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="register">
            <wsdl:input message="tns:register" name="register"></wsdl:input>
            <wsdl:output message="tns:registerResponse" name="registerResponse"></wsdl:output>
            <wsdl:fault message="tns:AlreadyExistingProviderException"
                        name="AlreadyExistingProviderException"></wsdl:fault>
        </wsdl:operation>
    </wsdl:portType>
    <wsdl:binding name="ProviderWebServiceServiceSoapBinding" type="tns:ProviderWebService">
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="deleteAll">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="deleteAll">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="deleteAllResponse">
                <soap:body use="literal"/>
            </wsdl:output>
        </wsdl:operation>
        <wsdl:operation name="findProvider">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="findProvider">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="findProviderResponse">
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="UnknownProviderException">
                <soap:fault name="UnknownProviderException" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
        <wsdl:operation name="register">
            <soap:operation soapAction="" style="document"/>
            <wsdl:input name="register">
                <soap:body use="literal"/>
            </wsdl:input>
            <wsdl:output name="registerResponse">
                <soap:body use="literal"/>
            </wsdl:output>
            <wsdl:fault name="AlreadyExistingProviderException">
                <soap:fault name="AlreadyExistingProviderException" use="literal"/>
            </wsdl:fault>
        </wsdl:operation>
    </wsdl:binding>
    <wsdl:service name="ProviderWebServiceService">
        <wsdl:port binding="tns:ProviderWebServiceServiceSoapBinding" name="ProviderWebServicePort">
            <soap:address location="http://localhost:8080/ProviderRegisterComponent/webservices/ProviderWS"/>
        </wsdl:port>
    </wsdl:service>
</wsdl:definitions>